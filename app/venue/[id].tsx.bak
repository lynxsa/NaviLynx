/**
 * Modern Venue Page - Operation Navigate Implementation
 * Advanced venue experience with AR navigation priority
 */

import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  StatusBar,
  Dimensions,
  ImageBackground,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useLocalSearchParams, router } from 'expo-router';
import { IconSymbol } from '@/components/ui/IconSymbol';
import { useThemeSafe } from '@/context/ThemeContext';
import { getVenueById, type Venue } from '@/data/southAfricanVenues';
import { colors, spacing, borderRadius, shadows } from '@/styles/modernTheme';

const { width, height } = Dimensions.get('window');

export default function ModernVenueScreen() {
  const { colors: themeColors, isDark } = useThemeSafe();
  const { id } = useLocalSearchParams<{ id: string }>();
  const [venue, setVenue] = useState<Venue | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadVenue = async () => {
      try {
        if (id) {
          const venueData = getVenueById(id);
          setVenue(venueData || null);
        }
      } catch (error) {
        console.error('Error loading venue:', error);
        Alert.alert('Error', 'Failed to load venue details');
      } finally {
        setLoading(false);
      }
    };

    loadVenue();
  }, [id]);

  const startIndoorNavigation = () => {
    if (venue) {
      router.push('/ar-navigation-landing');
    }
  };

  if (loading) {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: isDark ? '#000000' : '#FFFFFF' }]}>
        <View style={styles.loadingContainer}>
          <Text style={{ color: isDark ? '#FFFFFF' : themeColors.text }}>Loading venue...</Text>
        </View>
      </SafeAreaView>
    );
  }

  if (!venue) {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: isDark ? '#000000' : '#FFFFFF' }]}>
        <View style={styles.errorContainer}>
          <IconSymbol name="exclamationmark.triangle" size={48} color={themeColors.error} />
          <Text style={{ color: isDark ? '#FFFFFF' : themeColors.text, fontSize: 18, fontWeight: '600', textAlign: 'center' }}>
            Venue not found
          </Text>
          <TouchableOpacity
            style={[{ backgroundColor: colors.primary, paddingVertical: spacing.md, paddingHorizontal: spacing.lg, borderRadius: borderRadius.lg }]}
            onPress={() => router.back()}
          >
            <Text style={{ color: '#FFFFFF', fontSize: 16, fontWeight: '600' }}>Go Back</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <View style={[styles.container, { backgroundColor: isDark ? '#000000' : '#FFFFFF' }]}>
      <StatusBar barStyle={isDark ? "light-content" : "dark-content"} translucent />
      
      <ScrollView style={{ flex: 1 }} showsVerticalScrollIndicator={false}>
        {/* Hero Section */}
        <View style={{ height: height * 0.35, position: 'relative' }}>
          <ImageBackground
            source={{ uri: venue.image || 'https://via.placeholder.com/400x250/6366F1/FFFFFF?text=Venue' }}
            style={{ width: '100%', height: '100%' }}
            resizeMode="cover"
          >
            <View style={{
              ...StyleSheet.absoluteFillObject,
              backgroundColor: 'rgba(0,0,0,0.3)',
              justifyContent: 'space-between',
              paddingTop: 50,
              paddingBottom: spacing.lg,
              paddingHorizontal: spacing.md,
            }}>
              {/* Header */}
              <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>
                <TouchableOpacity 
                  onPress={() => router.back()} 
                  style={{ width: 40, height: 40, borderRadius: borderRadius.xl, alignItems: 'center', justifyContent: 'center', backgroundColor: 'rgba(0,0,0,0.6)' }}
                >
                  <IconSymbol name="chevron.left" size={20} color="#FFFFFF" />
                </TouchableOpacity>
                <Text style={{ color: '#FFFFFF', fontSize: 18, fontWeight: '700' }}>NaviLynx</Text>
                <View style={{ width: 40 }} />
              </View>

              {/* Venue Info */}
              <View>
                <Text style={{ color: '#FFFFFF', fontSize: 28, fontWeight: '700', marginBottom: spacing.xs }}>
                  {venue.name}
                </Text>
                <Text style={{ color: 'rgba(255,255,255,0.9)', fontSize: 16, fontWeight: '500', marginBottom: spacing.sm }}>
                  {venue.location.city}, {venue.location.province}
                </Text>
                <View style={{ flexDirection: 'row', alignItems: 'center', gap: spacing.sm }}>
                  <View style={{ flexDirection: 'row', alignItems: 'center', gap: spacing.xs }}>
                    <IconSymbol name="star.fill" size={14} color="#FFD700" />
                    <Text style={{ color: '#FFFFFF', fontSize: 14, fontWeight: '600' }}>{venue.rating}</Text>
                  </View>
                  <View style={{ width: 1, height: 16, backgroundColor: 'rgba(255,255,255,0.4)' }} />
                  <View style={{ flexDirection: 'row', alignItems: 'center', gap: spacing.xs }}>
                    <IconSymbol name="storefront" size={14} color="#FFFFFF" />
                    <Text style={{ color: '#FFFFFF', fontSize: 14, fontWeight: '600' }}>50+ stores</Text>
                  </View>
                </View>
              </View>
            </View>
          </ImageBackground>
        </View>

        {/* Action Buttons */}
        <View style={{ paddingHorizontal: spacing.md, paddingVertical: spacing.lg, gap: spacing.md }}>
          <TouchableOpacity
            style={[{ 
              flexDirection: 'row', 
              alignItems: 'center', 
              justifyContent: 'center', 
              paddingVertical: spacing.md + 2, 
              borderRadius: borderRadius.lg, 
              gap: spacing.sm, 
              backgroundColor: colors.primary,
              ...shadows.md 
            }]}
            onPress={startIndoorNavigation}
          >
            <IconSymbol name="location.fill" size={20} color="#FFFFFF" />
            <Text style={{ color: '#FFFFFF', fontSize: 16, fontWeight: '600' }}>Navigate Inside Venue</Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[{ 
              flexDirection: 'row', 
              alignItems: 'center', 
              justifyContent: 'center', 
              paddingVertical: spacing.md, 
              borderRadius: borderRadius.lg, 
              borderWidth: 1.5, 
              borderColor: colors.primary,
              backgroundColor: isDark ? 'rgba(255,255,255,0.05)' : '#FFFFFF',
              gap: spacing.sm 
            }]}
            onPress={() => Alert.alert('Navigate', `Opening Google Maps to ${venue.name}`)}
          >
            <IconSymbol name="map" size={18} color={colors.primary} />
            <Text style={{ fontSize: 16, fontWeight: '600', color: colors.primary }}>
              Navigate via Google Maps
            </Text>
          </TouchableOpacity>
        </View>

        {/* Bottom Padding */}
        <View style={{ height: spacing.xl }} />
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    gap: spacing.md,
  },
});

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    gap: spacing.md,
  },
  errorText: {
    fontSize: 18,
    fontWeight: '600',
    textAlign: 'center',
  },
  heroSection: {
    height: height * 0.35,
    position: 'relative',
  },
  heroImage: {
    width: '100%',
    height: '100%',
  },
  heroOverlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0,0,0,0.3)',
    justifyContent: 'space-between',
    paddingTop: 50,
    paddingBottom: spacing.lg,
    paddingHorizontal: spacing.md,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  headerButton: {
    width: 40,
    height: 40,
    borderRadius: borderRadius.xl,
    alignItems: 'center',
    justifyContent: 'center',
  },
  headerTitle: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: '700',
  },
  venueInfo: {
    alignItems: 'flex-start',
  },
  venueName: {
    color: '#FFFFFF',
    fontSize: 28,
    fontWeight: '700',
    marginBottom: spacing.xs,
    textShadowColor: 'rgba(0,0,0,0.5)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 3,
  },
  venueLocation: {
    color: 'rgba(255,255,255,0.9)',
    fontSize: 16,
    fontWeight: '500',
    marginBottom: spacing.sm,
  },
  venueStats: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: spacing.sm,
  },
  statItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: spacing.xs,
  },
  statText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
  },
  statDivider: {
    width: 1,
    height: 16,
    backgroundColor: 'rgba(255,255,255,0.4)',
  },
  actionSection: {
    paddingHorizontal: spacing.md,
    paddingVertical: spacing.lg,
    gap: spacing.md,
  },
  primaryAction: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: spacing.md + 2,
    borderRadius: borderRadius.lg,
    gap: spacing.sm,
    ...shadows.md,
  },
  primaryActionText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  secondaryAction: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: spacing.md,
    borderRadius: borderRadius.lg,
    borderWidth: 1.5,
    gap: spacing.sm,
  },
  secondaryActionText: {
    fontSize: 16,
    fontWeight: '600',
  },
  section: {
    paddingHorizontal: spacing.md,
    paddingVertical: spacing.lg,
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: spacing.md,
    gap: spacing.xs,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
  },
  dealsScroll: {
    marginHorizontal: -spacing.md,
  },
  dealCard: {
    width: 200,
    borderRadius: borderRadius.lg,
    borderWidth: 1,
    padding: spacing.md,
    position: 'relative',
  },
  dealBadge: {
    position: 'absolute',
    top: spacing.sm,
    right: spacing.sm,
    paddingHorizontal: spacing.xs,
    paddingVertical: 4,
    borderRadius: borderRadius.sm,
  },
  dealBadgeText: {
    color: '#FFFFFF',
    fontSize: 10,
    fontWeight: '700',
    textTransform: 'uppercase',
  },
  dealStore: {
    fontSize: 12,
    fontWeight: '600',
    marginBottom: spacing.xs,
    textTransform: 'uppercase',
    letterSpacing: 0.5,
  },
  dealTitle: {
    fontSize: 15,
    fontWeight: '600',
    marginBottom: spacing.xs,
    lineHeight: 20,
  },
  dealDescription: {
    fontSize: 13,
    lineHeight: 18,
    marginBottom: spacing.sm,
  },
  dealExpiry: {
    fontSize: 11,
    fontWeight: '500',
  },
  locationsGrid: {
    gap: spacing.sm,
  },
  locationCard: {
    flexDirection: 'row',
    alignItems: 'center',
    borderRadius: borderRadius.lg,
    borderWidth: 1,
    padding: spacing.md,
    gap: spacing.md,
  },
  locationIcon: {
    width: 44,
    height: 44,
    borderRadius: borderRadius.xl,
    alignItems: 'center',
    justifyContent: 'center',
  },
  locationInfo: {
    flex: 1,
  },
  locationName: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 2,
  },
  locationCategory: {
    fontSize: 12,
    fontWeight: '600',
    marginBottom: spacing.xs,
    textTransform: 'uppercase',
    letterSpacing: 0.5,
  },
  locationDescription: {
    fontSize: 13,
    lineHeight: 18,
  },
  backButton: {
    paddingVertical: spacing.md,
    paddingHorizontal: spacing.lg,
    borderRadius: borderRadius.lg,
    ...shadows.sm,
  },
  backButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
});
      router.push(`/chat/${venue.id}`);
    }
  };

  if (loading) {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
        <StatusBar barStyle={isDark ? "light-content" : "dark-content"} />
        <View style={styles.loadingContainer}>
          <Text style={[styles.loadingText, { color: colors.text }]}>Loading...</Text>
        </View>
      </SafeAreaView>
    );
  }

  if (!venue) {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
        <StatusBar barStyle={isDark ? "light-content" : "dark-content"} />
        <View style={styles.errorContainer}>
          <IconSymbol name="exclamationmark.triangle" size={64} color={colors.textSecondary} />
          <Text style={[styles.errorTitle, { color: colors.text }]}>Venue Not Found</Text>
          <Text style={[styles.errorSubtitle, { color: colors.textSecondary }]}>
            The venue you're looking for doesn't exist or has been removed.
          </Text>
          <TouchableOpacity 
            style={[styles.button, { backgroundColor: colors.primary }]}
            onPress={() => router.back()}
          >
            <Text style={[styles.buttonText, { color: '#FFFFFF' }]}>Go Back</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
      <StatusBar barStyle={isDark ? "light-content" : "dark-content"} />
      
      {/* Header */}
      <View style={[styles.header, { backgroundColor: colors.background }]}>
        <TouchableOpacity 
          style={[styles.backButton, { backgroundColor: colors.surface }]}
          onPress={() => router.back()}
        >
          <IconSymbol name="chevron.left" size={24} color={colors.text} />
        </TouchableOpacity>
        
        <Text style={[styles.headerTitle, { color: colors.text }]} numberOfLines={1}>
          {venue.name}
        </Text>
        
        <TouchableOpacity 
          style={[styles.shareButton, { backgroundColor: colors.surface }]}
          onPress={() => Alert.alert('Share', 'Share venue functionality')}
        >
          <IconSymbol name="square.and.arrow.up" size={24} color={colors.text} />
        </TouchableOpacity>
      </View>

      <ScrollView 
        style={styles.scrollView}
        showsVerticalScrollIndicator={false}
      >
        <VenueDetailsCard venue={venue} />
        
        {/* Action Buttons */}
        <View style={styles.actionsContainer}>
          <TouchableOpacity 
            style={[styles.primaryButton, { backgroundColor: colors.primary }]}
            onPress={startNavigation}
          >
            <IconSymbol name="location.fill" size={20} color="#FFFFFF" />
            <Text style={[styles.primaryButtonText, { color: '#FFFFFF' }]}>
              Start Navigation
            </Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[styles.secondaryButton, { backgroundColor: colors.surface }]}
            onPress={openChat}
          >
            <IconSymbol name="message.fill" size={20} color={colors.primary} />
            <Text style={[styles.secondaryButtonText, { color: colors.primary }]}>
              Ask NaviGenie
            </Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: modernTheme.spacing.lg,
    paddingVertical: modernTheme.spacing.md,
    ...modernTheme.shadows.sm,
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  headerTitle: {
    flex: 1,
    fontSize: 18,
    fontWeight: '600',
    marginHorizontal: modernTheme.spacing.md,
  },
  shareButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  scrollView: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  loadingText: {
    fontSize: 16,
    fontWeight: '500',
  },
  errorContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: modernTheme.spacing.xl,
  },
  errorTitle: {
    fontSize: 24,
    fontWeight: '700',
    marginTop: modernTheme.spacing.lg,
    marginBottom: modernTheme.spacing.sm,
  },
  errorSubtitle: {
    fontSize: 16,
    textAlign: 'center',
    lineHeight: 24,
    marginBottom: modernTheme.spacing.xl,
  },
  actionsContainer: {
    padding: modernTheme.spacing.lg,
    gap: modernTheme.spacing.md,
  },
  primaryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: modernTheme.spacing.md,
    borderRadius: modernTheme.borderRadius.lg,
    ...modernTheme.shadows.sm,
  },
  primaryButtonText: {
    fontSize: 16,
    fontWeight: '600',
    marginLeft: modernTheme.spacing.sm,
  },
  secondaryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: modernTheme.spacing.md,
    borderRadius: modernTheme.borderRadius.lg,
    borderWidth: 1,
    borderColor: 'transparent',
  },
  secondaryButtonText: {
    fontSize: 16,
    fontWeight: '600',
    marginLeft: modernTheme.spacing.sm,
  },
  button: {
    paddingHorizontal: modernTheme.spacing.xl,
    paddingVertical: modernTheme.spacing.md,
    borderRadius: modernTheme.borderRadius.lg,
    marginTop: modernTheme.spacing.lg,
  },
  buttonText: {
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center',
  },
});
